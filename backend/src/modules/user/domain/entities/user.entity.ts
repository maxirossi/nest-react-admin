import { AggregateRootBase } from '../../../../shared/domain/base/aggregate-root.base';
import { Username } from '../../../../shared/domain/value-objects/username';
import { Password } from '../../../../shared/domain/value-objects/password';
import { UserFullName } from '../value-objects/user-full-name';
import { UserRole } from '../value-objects/user-role';
import { UserCreatedEvent } from '../events/user-created.event';
import { UserUpdatedEvent } from '../events/user-updated.event';
import { UserDeletedEvent } from '../events/user-deleted.event';

export interface UserProps {
  id: string;
  fullName: UserFullName;
  username: Username;
  password: Password;
  role: UserRole;
  isActive: boolean;
  refreshToken?: string;
  createdAt: Date;
  updatedAt: Date;
}

export class User extends AggregateRootBase {
  private _fullName: UserFullName;
  private _username: Username;
  private _password: Password;
  private _role: UserRole;
  private _isActive: boolean;
  private _refreshToken?: string;

  private constructor(props: UserProps) {
    super(props.id, props.createdAt, props.updatedAt);
    this._fullName = props.fullName;
    this._username = props.username;
    this._password = props.password;
    this._role = props.role;
    this._isActive = props.isActive;
    this._refreshToken = props.refreshToken;
  }

  static create(props: Omit<UserProps, 'id' | 'createdAt' | 'updatedAt'>): User {
    const now = new Date();
    const user = new User({
      ...props,
      id: '', // Will be generated by the database
      createdAt: now,
      updatedAt: now,
    });

    user.addDomainEvent(
      new UserCreatedEvent(
        user.id,
        props.username.value,
        props.fullName.fullName,
        props.role.value,
      ),
    );

    return user;
  }

  static reconstitute(props: UserProps): User {
    return new User(props);
  }

  // Getters
  get fullName(): UserFullName {
    return this._fullName;
  }

  get username(): Username {
    return this._username;
  }

  get password(): Password {
    return this._password;
  }

  get role(): UserRole {
    return this._role;
  }

  get isActive(): boolean {
    return this._isActive;
  }

  get refreshToken(): string | undefined {
    return this._refreshToken;
  }

  // Business methods
  updateProfile(fullName: UserFullName, username: Username): void {
    this._fullName = fullName;
    this._username = username;

    this.addDomainEvent(
      new UserUpdatedEvent(this.id, username.value, fullName.fullName),
    );
  }

  changePassword(newPassword: Password): void {
    this._password = newPassword;

    this.addDomainEvent(
      new UserUpdatedEvent(this.id, this._username.value, this._fullName.fullName),
    );
  }

  changeRole(newRole: UserRole): void {
    this._role = newRole;

    this.addDomainEvent(
      new UserUpdatedEvent(this.id, this._username.value, this._fullName.fullName),
    );
  }

  activate(): void {
    this._isActive = true;

    this.addDomainEvent(
      new UserUpdatedEvent(this.id, this._username.value, this._fullName.fullName),
    );
  }

  deactivate(): void {
    this._isActive = false;

    this.addDomainEvent(
      new UserUpdatedEvent(this.id, this._username.value, this._fullName.fullName),
    );
  }

  setRefreshToken(token: string | null): void {
    this._refreshToken = token || undefined;
  }

  delete(): void {
    this.addDomainEvent(
      new UserDeletedEvent(this.id, this._username.value),
    );
  }
}
